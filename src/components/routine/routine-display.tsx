
"use client";

import { useState, useMemo, useEffect, forwardRef, useImperativeHandle } from 'react';
import type { GenerateScheduleOutput, ScheduleEntry } from "@/ai/flows/generate-schedule";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Download, Trash2 } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from '../ui/checkbox';
import { cn } from '@/lib/utils';

interface RoutineDisplayProps {
  scheduleData: GenerateScheduleOutput | null;
  timeSlots: string[];
  classes: string[];
  subjects: string[];
  teachers: string[];
  teacherSubjects: Record<string, string[]>;
  onScheduleChange: (newSchedule: ScheduleEntry[]) => void;
}

type GridSchedule = {
  [day: string]: {
    [className: string]: {
        [timeSlot: string]: ScheduleEntry[]
    }
  }
};

const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

// Helper function to extract the base grade from a class name (e.g., "9th A" -> "9", "11th Arts" -> "11")
const getGradeFromClassName = (className: string): string | null => {
    const match = className.match(/^(\d+)/);
    return match ? match[1] : null;
};

// Function to categorize classes
const categorizeClasses = (classes: string[]) => {
    const secondary: string[] = [];
    const seniorSecondary: string[] = [];
    classes.forEach(c => {
      const grade = getGradeFromClassName(c);
      if (grade === '9' || grade === '10') {
        secondary.push(c);
      } else if (grade === '11' || grade === '12') {
        seniorSecondary.push(c);
      }
    });
    return { secondaryClasses: secondary.sort(), seniorSecondaryClasses: seniorSecondary.sort() };
};

const toRoman = (num: number): string => {
    const romanMap: { [key: number]: string } = {
        1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X',
        40: 'XL', 50: 'L', 90: 'XC', 100: 'C',
        400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'
    };
    let result = '';
    const sortedKeys = Object.keys(romanMap).map(Number).sort((a, b) => b - a);
    for (const key of sortedKeys) {
        while (num >= key) {
            result += romanMap[key];
            num -= key;
        }
    }
    return result;
};


const RoutineDisplay = forwardRef(({ scheduleData, timeSlots, classes, subjects, teachers, teacherSubjects, onScheduleChange }: RoutineDisplayProps, ref) => {
  const [printHeader, setPrintHeader] = useState("Class Routine – Session 2025–26");
  const [printFooter, setPrintFooter] = useState("Generated by BiharSchoolRoutine");
  const [selectedClass, setSelectedClass] = useState<string>('all');
  
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [currentCell, setCurrentCell] = useState<{ day: string; timeSlot: string; className: string; entry: ScheduleEntry | null } | null>(null);
  const [cellData, setCellData] = useState<{ subject: string; classNames: string[]; teacher: string }>({
    subject: "",
    classNames: [],
    teacher: "",
  });

  const { secondaryClasses, seniorSecondaryClasses } = useMemo(() => categorizeClasses(classes), [classes]);
  const { instructionalSlots, instructionalSlotMap } = useMemo(() => {
    const instructionalSlots: string[] = [];
    const instructionalSlotMap: { [timeSlot: string]: number } = {};
    let periodCounter = 1;
    timeSlots.forEach(slot => {
        // Exclude slots typically for Prayer and Lunch
        if (!slot.includes('09:00') && !slot.includes('09:15') && !slot.includes('12:00') && !slot.includes('13:00')) {
            instructionalSlots.push(slot);
            instructionalSlotMap[slot] = periodCounter++;
        }
    });
    return { instructionalSlots, instructionalSlotMap };
  }, [timeSlots]);

  const clashSet = useMemo(() => {
    const clashes = new Set<string>();
    if (!scheduleData?.schedule) return clashes;

    const bookings: Record<string, { teachers: string[]; classes: string[] }> = {};

    scheduleData.schedule.forEach(entry => {
        const key = `${entry.day}-${entry.timeSlot}`;
        if (!bookings[key]) {
            bookings[key] = { teachers: [], classes: [] };
        }

        const entryClasses = entry.className.split(' & ').map(c => c.trim());
        const entryTeachers = entry.teacher.split(' और ').map(t => t.trim()).filter(t => t !== "N/A");

        // Check for teacher clashes
        entryTeachers.forEach(teacher => {
            if (bookings[key].teachers.includes(teacher)) {
                clashes.add(`teacher-${key}-${teacher}`);
            }
            bookings[key].teachers.push(teacher);
        });

        // Check for class clashes
        entryClasses.forEach(c => {
             if (bookings[key].classes.includes(c)) {
                 clashes.add(`class-${key}-${c}`);
             }
             bookings[key].classes.push(c);
        });
    });

    // Go back through and mark all participants in a clash
    scheduleData.schedule.forEach(entry => {
        const key = `${entry.day}-${entry.timeSlot}`;
        const entryClasses = entry.className.split(' & ').map(c => c.trim());
        const entryTeachers = entry.teacher.split(' और ').map(t => t.trim()).filter(t => t !== "N/A");

        entryTeachers.forEach(teacher => {
            if (clashes.has(`teacher-${key}-${teacher}`)) {
                clashes.add(`${key}-${entry.className}-${teacher}`);
            }
        });

        entryClasses.forEach(c => {
            if (clashes.has(`class-${key}-${c}`)) {
              clashes.add(`${key}-${c}-${entry.teacher}`);
            }
        });
    });

    return clashes;
  }, [scheduleData]);


  const gridSchedule = useMemo<GridSchedule>(() => {
    const grid: GridSchedule = {};
    
    // Initialize the grid structure
    daysOfWeek.forEach(day => {
        grid[day] = {};
        classes.forEach(c => {
            grid[day][c] = {};
            timeSlots.forEach(slot => {
                grid[day][c][slot] = [];
            });
        });
    });

    // Populate the grid with schedule entries
    if (scheduleData?.schedule) {
      scheduleData.schedule.forEach(entry => {
        // Handle combined and single class names
        const entryClasses = entry.className.split(' & ').map(c => c.trim());
        
        entryClasses.forEach(className => {
            // Ensure the class from the entry exists in the grid to avoid errors
            if (grid[entry.day]?.[className]?.[entry.timeSlot]) {
              // Push a reference to the original entry
              grid[entry.day][className][entry.timeSlot].push(entry);
            }
        });
      });
    }

    return grid;
  }, [scheduleData, timeSlots, classes]);

  const availableTeachers = useMemo(() => {
    if (!cellData.subject) {
      return teachers; // No subject selected, show all teachers
    }
    const qualifiedTeachers = teachers.filter(teacher => 
      teacherSubjects[teacher]?.includes(cellData.subject)
    );
    return qualifiedTeachers.length > 0 ? qualifiedTeachers : teachers; // Fallback to all if none are mapped
  }, [cellData.subject, teachers, teacherSubjects]);

  // Determine which classes are disabled in the edit dialog based on selection
  const getDisabledClasses = useMemo(() => {
    if (cellData.classNames.length === 0) {
      return new Set(); // Nothing selected, nothing disabled
    }
    const firstSelectedGrade = getGradeFromClassName(cellData.classNames[0]);
    if (!firstSelectedGrade) {
      return new Set(classes); // Should not happen with valid data, but disable all as a fallback
    }
    
    const disabled = new Set<string>();
    classes.forEach(c => {
      if (getGradeFromClassName(c) !== firstSelectedGrade) {
        disabled.add(c);
      }
    });
    return disabled;
  }, [cellData.classNames, classes]);

  useEffect(() => {
    // When the subject changes, check if the current teacher is still valid
    const currentTeachers = cellData.teacher.split(' और ').map(t => t.trim());
    if (cellData.subject && currentTeachers.some(t => !availableTeachers.includes(t) && t !== 'N/A')) {
        // If not, reset the teacher selection
        setCellData(prev => ({ ...prev, teacher: '' }));
    }
  }, [cellData.subject, availableTeachers, cellData.teacher]);
  
  useImperativeHandle(ref, () => ({
      handlePrint: () => {
        const root = document.documentElement;
        root.style.setProperty('--print-header-content', `"${printHeader}"`);
        root.style.setProperty('--print-footer-content', `"${printFooter}"`);
        window.print();
      }
  }));

  const handleExport = () => {
    const csvRows: string[] = [];

    // Header Row
    const headers = ['Day', 'Class', ...timeSlots.map(slot => {
        const period = instructionalSlotMap[slot] ? ` (${toRoman(instructionalSlotMap[slot])})` : '';
        return `"${slot}${period}"`;
    })];
    csvRows.push(headers.join(','));

    const processClassesForExport = (displayClasses: string[]) => {
        if (displayClasses.length === 0) return;

        const filteredClasses = selectedClass === 'all' 
          ? displayClasses 
          : displayClasses.filter(c => c === selectedClass);
        
        if (filteredClasses.length === 0) return;

        daysOfWeek.forEach(day => {
            filteredClasses.forEach((className, classIndex) => {
                const row: string[] = [];
                row.push(classIndex === 0 ? `"${day}"` : '""');
                row.push(`"${className}"`);

                timeSlots.forEach(slot => {
                    const entries = gridSchedule[day]?.[className]?.[slot] || [];
                    if (entries.length > 0) {
                        const cellContent = entries.map(entry => {
                          const teacherDisplay = entry.teacher === 'N/A' ? '' : `(${entry.teacher})`;
                          return `${entry.subject} ${teacherDisplay}`;
                        }).join(' / ');
                        row.push(`"${cellContent.replace(/"/g, '""')}"`);
                    } else {
                        row.push('""'); // Empty cell
                    }
                });
                csvRows.push(row.join(','));
            });
             // Add an empty row for spacing between days for better readability
            if (filteredClasses.length > 0) {
                csvRows.push(Array(headers.length).fill('""').join(','));
            }
        });
    };
    
    const visibleSections: {title: string, classes: string[]}[] = [];
    if (secondaryClasses.some(c => selectedClass === 'all' || selectedClass === c)) {
        visibleSections.push({title: "Secondary", classes: secondaryClasses});
    }
    if (seniorSecondaryClasses.some(c => selectedClass === 'all' || selectedClass === c)) {
        visibleSections.push({title: "Senior Secondary", classes: seniorSecondaryClasses});
    }

    visibleSections.forEach((section, sectionIndex) => {
        csvRows.push(`"${section.title}",${Array(headers.length - 1).fill('""').join(',')}`);
        processClassesForExport(section.classes);
        if (sectionIndex < visibleSections.length - 1) {
            csvRows.push(Array(headers.length).fill('""').join(',')); // Extra space between sections
        }
    });

    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", `school-routine-grid.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  const handleCellClick = (day: string, timeSlot: string, className: string, entry: ScheduleEntry | null) => {
    setCurrentCell({ day, timeSlot, className, entry });
    if (entry) {
        setCellData({
            subject: entry.subject,
            classNames: entry.className.split(' & ').map(c => c.trim()),
            teacher: entry.teacher,
        });
    } else {
        setCellData({ subject: "", classNames: [className], teacher: "" });
    }
    setIsDialogOpen(true);
  };
  
  const handleSave = () => {
    if (!currentCell || cellData.classNames.length === 0) return;
  
    const currentSchedule = scheduleData?.schedule || [];
    let newSchedule: ScheduleEntry[];
  
    const newEntryData = {
        subject: cellData.subject,
        className: cellData.classNames.sort().join(' & '),
        teacher: cellData.teacher
    };

    if (currentCell.entry) {
      // Update existing entry
      newSchedule = currentSchedule.map(e =>
        e === currentCell.entry ? { ...e, ...newEntryData } : e
      );
    } else {
      // Add new entry
      const newEntry: ScheduleEntry = {
        day: currentCell.day,
        timeSlot: currentCell.timeSlot,
        ...newEntryData,
      };
      newSchedule = [...currentSchedule, newEntry];
    }
    
    onScheduleChange(newSchedule);
    setIsDialogOpen(false);
    setCurrentCell(null);
  };
  
  const handleDelete = () => {
     if (!currentCell || !currentCell.entry) return;
     const newSchedule = (scheduleData?.schedule || []).filter(
        (e) => e !== currentCell.entry
      );
      onScheduleChange(newSchedule);
      setIsDialogOpen(false);
      setCurrentCell(null);
  }

  const renderCellContent = (day: string, className: string, timeSlot: string) => {
    const entries = gridSchedule[day]?.[className]?.[timeSlot] || [];
    const isClashed = entries.some(entry => {
        const entryClasses = entry.className.split(' & ').map(c => c.trim());
        const entryTeachers = entry.teacher.split(' और ').map(t => t.trim()).filter(t => t !== "N/A");
        return entryTeachers.some(t => clashSet.has(`teacher-${day}-${timeSlot}-${t}`)) ||
               entryClasses.some(c => clashSet.has(`class-${day}-${timeSlot}-${c}`));
    });

    return (
        <div
            className={cn(
                "h-full min-h-[60px] flex flex-col items-center justify-center p-1 space-y-1",
                isClashed && "bg-destructive/20"
            )}
            onClick={() => handleCellClick(day, timeSlot, className, entries[0] || null)}
        >
            {entries.length === 0 && (
                <div className="flex-grow w-full flex items-center justify-center">
                    <span className="text-muted-foreground text-xs hover:text-primary opacity-50 hover:opacity-100 no-print">+</span>
                </div>
            )}
            {[...new Map(entries.map(e => [JSON.stringify(e), e])).values()].map((entry, index) => {
                const teachersList = entry.teacher.split(' और ').map(t => t.trim());
                return (
                    <div
                        key={index}
                        className="w-full text-xs text-center p-1 bg-background rounded cursor-pointer hover:bg-accent hover:shadow-md no-print:shadow-sm"
                    >
                        <div className="font-semibold">{entry.subject}</div>
                        <div className="text-muted-foreground text-xs">
                           {teachersList.length > 1 ? (
                                teachersList.map((t, i) => <div key={i}>{t}</div>)
                           ) : (
                                entry.teacher
                           )}
                        </div>
                        {entry.className.includes('&') && (
                            <div className="text-muted-foreground text-[10px] italic">(Combined)</div>
                        )}
                    </div>
                )
            })}
        </div>
    );
};


  const renderScheduleTable = (title: string, displayClasses: string[]) => {
    if (selectedClass !== 'all' && !displayClasses.includes(selectedClass)) {
        return null;
    }
    
    const filteredDisplayClasses = selectedClass === 'all' 
      ? displayClasses 
      : displayClasses.filter(c => c === selectedClass);

    if (filteredDisplayClasses.length === 0 && selectedClass !== 'all') {
      // If a class is selected but doesn't belong to this section, don't render anything.
      return null;
    }
  
    return (
      <div className="printable-section break-inside-avoid">
        <h3 className="text-lg font-semibold mb-2">{title}</h3>
        <div className="overflow-x-auto border rounded-lg">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="font-bold align-bottom">Day</TableHead>
                <TableHead className="font-bold align-bottom">Class</TableHead>
                {timeSlots.map(slot => (
                  <TableHead key={slot} className="text-center font-bold text-xs min-w-[100px] p-1 align-bottom">
                      <div>{slot}</div>
                      <div className="font-normal text-muted-foreground">
                        {instructionalSlotMap[slot] ? toRoman(instructionalSlotMap[slot]) : '-'}
                      </div>
                  </TableHead>
                ))}
              </TableRow>
            </TableHeader>
            <TableBody>
              {daysOfWeek.map(day => (
                filteredDisplayClasses.map((className, classIndex) => (
                    <TableRow key={`${day}-${className}`}>
                        {classIndex === 0 && (
                            <TableCell className="font-medium align-top" rowSpan={filteredDisplayClasses.length}>
                                {day}
                            </TableCell>
                        )}
                        <TableCell className="font-medium align-top">{className}</TableCell>
                        {timeSlots.map(slot => (
                            <TableCell key={`${day}-${className}-${slot}`} className="p-0 align-top">
                            {renderCellContent(day, className, slot)}
                            </TableCell>
                        ))}
                    </TableRow>
                ))
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    );
  };

  return (
    <>
      <Card className="h-full flex flex-col">
        <CardHeader className="no-print">
          <div className="flex justify-between items-start">
              <div>
                  <CardTitle>School Routine</CardTitle>
                  <CardDescription>View, print, export, or edit your routine by clicking on a cell.</CardDescription>
              </div>
              <div className="flex gap-2">
                    <Button onClick={handleExport} size="sm" variant="outline">
                        <Download className="mr-2 h-4 w-4" /> Export CSV
                    </Button>
                </div>
          </div>
          <div className="space-y-4 pt-4">
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                    <div className="sm:col-span-1">
                        <Label htmlFor="class-filter">Filter by Class</Label>
                        <Select value={selectedClass} onValueChange={setSelectedClass}>
                          <SelectTrigger id="class-filter" className="w-full">
                            <SelectValue placeholder="Select a class" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">All Classes</SelectItem>
                            {classes.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                          </SelectContent>
                        </Select>
                    </div>
                    <div>
                        <Label htmlFor="print-header">Print Header</Label>
                        <Input id="print-header" value={printHeader} onChange={(e) => setPrintHeader(e.target.value)} />
                    </div>
                    <div>
                        <Label htmlFor="print-footer">Print Footer</Label>
                        <Input id="print-footer" value={printFooter} onChange={(e) => setPrintFooter(e.target.value)} />
                    </div>
                </div>
            </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {renderScheduleTable("Secondary", secondaryClasses)}
            {renderScheduleTable("Senior Secondary", seniorSecondaryClasses)}
          </div>
        </CardContent>
      </Card>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Schedule Slot</DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="subject" className="text-right">Subject</Label>
              <Select
                value={cellData.subject}
                onValueChange={(value) => setCellData({ ...cellData, subject: value, teacher: '' })}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select subject" />
                </SelectTrigger>
                <SelectContent>
                  {subjects.map((s) => (
                    <SelectItem key={s} value={s}>{s}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-start gap-4">
              <Label className="text-right pt-2">Class</Label>
               <div className="col-span-3 grid grid-cols-2 gap-2">
                  {classes.map((c) => (
                    <div key={c} className="flex items-center space-x-2">
                        <Checkbox
                            id={`class-${c}`}
                            checked={cellData.classNames.includes(c)}
                            disabled={getDisabledClasses.has(c)}
                            onCheckedChange={(checked) => {
                                const newClassNames = checked
                                    ? [...cellData.classNames, c]
                                    : cellData.classNames.filter(name => name !== c);
                                setCellData({...cellData, classNames: newClassNames});
                            }}
                        />
                        <Label htmlFor={`class-${c}`} className={getDisabledClasses.has(c) ? 'text-muted-foreground' : ''}>{c}</Label>
                    </div>
                  ))}
                </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="teacher" className="text-right">Teacher(s)</Label>
               <Input
                  id="teacher"
                  value={cellData.teacher}
                  onChange={(e) => setCellData({ ...cellData, teacher: e.target.value })}
                  className="col-span-3"
                  placeholder="e.g. Teacher 1 और Teacher 2"
                />
            </div>
             <div className="col-span-4 text-xs text-muted-foreground text-center">
                For multiple teachers, use " और " as a separator.
                <br />
                Available for {cellData.subject || "any subject"}: {availableTeachers.join(', ')}
             </div>
          </div>
          <DialogFooter className="sm:justify-between">
             {currentCell?.entry ? (
                <Button type="button" variant="destructive" onClick={handleDelete} className="gap-1">
                  <Trash2 className="h-4 w-4" /> Delete
                </Button>
             ) : <div></div>}
            <div className="flex gap-2">
                <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)}>Cancel</Button>
                <Button type="submit" onClick={handleSave}>Save changes</Button>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
});

RoutineDisplay.displayName = 'RoutineDisplay';

export default RoutineDisplay;


