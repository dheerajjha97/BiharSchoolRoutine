
"use client";

import { useState } from 'react';
import type { GenerateScheduleOutput } from "@/ai/flows/generate-schedule";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Download, Printer } from "lucide-react";

interface RoutineDisplayProps {
  scheduleData: GenerateScheduleOutput;
  timeSlots: string[];
}

type ParsedCell = {
    class: string,
    subject: string,
    teacher: string,
};

export default function RoutineDisplay({ scheduleData, timeSlots }: RoutineDisplayProps) {
  const [printHeader, setPrintHeader] = useState("Weekly Class Schedule");
  const [printFooter, setPrintFooter] = useState("Generated by BiharSchoolRoutine");
  const [selectedClass, setSelectedClass] = useState<string>('all');

  const schedule = scheduleData.schedule || {};
  const days = Object.keys(schedule);
  
  const classes = scheduleData.schedule ? [...new Set(Object.values(scheduleData.schedule).flatMap(day => Object.values(day).filter(Boolean).map(cell => (cell as ParsedCell).class)))] : [];

  const handlePrint = () => {
    const root = document.documentElement;
    root.style.setProperty('--print-header-content', `"${printHeader}"`);
    root.style.setProperty('--print-footer-content', `"${printFooter}"`);
    window.print();
  };

  const handleExport = () => {
    const csvRows = [];
    const headers = ['Time Slot', ...days];
    csvRows.push(headers.join(','));

    for (const slot of timeSlots) {
      const row = [slot];
      for (const day of days) {
        const cellContent = schedule[day]?.[slot] ?? null;
        let parsedContent = '';
        if (cellContent && (selectedClass === 'all' || (cellContent as ParsedCell).class === selectedClass)) {
            try {
              const parsed: ParsedCell = cellContent as ParsedCell;
              parsedContent = `Class: ${parsed.class}; Subject: ${parsed.subject}; Teacher: ${parsed.teacher}`;
            } catch (e) {
               if(typeof cellContent === 'string') {
                parsedContent = cellContent;
               }
            }
        }
        row.push(`"${parsedContent.replace(/"/g, '""')}"`); // Escape double quotes
      }
      csvRows.push(row.join(','));
    }
    
    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", "school-routine.csv");
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  const renderCellContent = (content: ParsedCell | null) => {
    if (!content || (selectedClass !== 'all' && content.class !== selectedClass)) return <span className="text-muted-foreground">-</span>;
    try {
      const parsed: ParsedCell = content;
      return (
        <div className="text-xs text-center">
          <div className="font-semibold">{parsed.subject}</div>
          <div className="text-muted-foreground">{parsed.teacher}</div>
        </div>
      );
    } catch (e) {
      if (typeof content === 'string') return <span className="text-xs">{content}</span>;
      return <span className="text-muted-foreground">-</span>;
    }
  };

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>Generated Routine</CardTitle>
        <CardDescription>View, print, or export your new routine.</CardDescription>
      </CardHeader>
      <CardContent className="flex-grow flex flex-col gap-4">
        <div className="printable-area flex-grow">
          <div className="no-print space-y-4 p-4 border rounded-lg bg-muted/30">
              <div className="grid grid-cols-2 gap-4">
                  <div>
                      <Label htmlFor="print-header">Print Header</Label>
                      <Input id="print-header" value={printHeader} onChange={(e) => setPrintHeader(e.target.value)} />
                  </div>
                  <div>
                      <Label htmlFor="print-footer">Print Footer</Label>
                      <Input id="print-footer" value={printFooter} onChange={(e) => setPrintFooter(e.target.value)} />
                  </div>
              </div>
              {classes.length > 0 && (
                <div>
                    <Label htmlFor="class-filter">Filter by Class</Label>
                    <select id="class-filter" value={selectedClass} onChange={(e) => setSelectedClass(e.target.value)} className="w-full p-2 border rounded-md bg-background">
                        <option value="all">All Classes</option>
                        {classes.map(c => <option key={c} value={c}>{c}</option>)}
                    </select>
                </div>
              )}
              <div className="flex gap-2">
                  <Button onClick={handlePrint} className="w-full">
                      <Printer className="mr-2 h-4 w-4" /> Print
                  </Button>
                  <Button onClick={handleExport} variant="secondary" className="w-full">
                      <Download className="mr-2 h-4 w-4" /> Export CSV
                  </Button>
              </div>
          </div>
          <div className="mt-4">
              <h3 className="text-center font-bold text-lg mb-2">{printHeader}{selectedClass !== 'all' && ` - ${selectedClass}`}</h3>
              <div className="overflow-x-auto">
                <Table>
                    <TableHeader>
                    <TableRow>
                        <TableHead className="min-w-[120px]">Time</TableHead>
                        {days.map(day => <TableHead key={day}>{day}</TableHead>)}
                    </TableRow>
                    </TableHeader>
                    <TableBody>
                    {timeSlots.map(slot => (
                        <TableRow key={slot}>
                        <TableCell className="font-medium">{slot}</TableCell>
                        {days.map(day => (
                            <TableCell key={`${day}-${slot}`}>
                            {renderCellContent(schedule[day]?.[slot] ?? null)}
                            </TableCell>
                        ))}
                        </TableRow>
                    ))}
                    </TableBody>
                </Table>
              </div>
              <p className="text-center text-xs text-muted-foreground mt-4">{printFooter}</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
