
"use client";

import { useState, useMemo } from 'react';
import type { GenerateScheduleOutput, ScheduleEntry } from "@/ai/flows/generate-schedule";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Download, Printer, Trash2 } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface RoutineDisplayProps {
  scheduleData: GenerateScheduleOutput;
  timeSlots: string[];
  classes: string[];
  subjects: string[];
  teachers: string[];
  onScheduleChange: (newSchedule: ScheduleEntry[]) => void;
}

type GridSchedule = {
  [day: string]: {
    [timeSlot: string]: ScheduleEntry[]
  }
};

const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

export default function RoutineDisplay({ scheduleData, timeSlots, classes, subjects, teachers, onScheduleChange }: RoutineDisplayProps) {
  const [printHeader, setPrintHeader] = useState("Weekly Class Schedule");
  const [printFooter, setPrintFooter] = useState("Generated by BiharSchoolRoutine");
  const [selectedClass, setSelectedClass] = useState<string>('all');
  
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [currentCell, setCurrentCell] = useState<{ day: string; timeSlot: string; class: string } | null>(null);
  const [cellData, setCellData] = useState<{ subject: string; className: string; teacher: string }>({
    subject: "",
    className: "",
    teacher: "",
  });


  const gridSchedule = useMemo<GridSchedule>(() => {
    const grid: GridSchedule = {};
    
    daysOfWeek.forEach(day => {
        grid[day] = {};
        timeSlots.forEach(slot => {
            grid[day][slot] = [];
        })
    });

    scheduleData.schedule.forEach(entry => {
      if (grid[entry.day] && grid[entry.day][entry.timeSlot]) {
        grid[entry.day][entry.timeSlot].push(entry);
      }
    });

    return grid;
  }, [scheduleData, timeSlots]);


  const handlePrint = () => {
    const root = document.documentElement;
    root.style.setProperty('--print-header-content', `"${printHeader}"`);
    root.style.setProperty('--print-footer-content', `"${printFooter}"`);
    window.print();
  };

  const handleExport = () => {
    const csvRows = [];
    const headers = ['Day', 'Time Slot', 'Class', 'Subject', 'Teacher'];
    csvRows.push(headers.join(','));

    for (const entry of scheduleData.schedule) {
        if(selectedClass === 'all' || entry.className.includes(selectedClass)) {
            const row = [
                entry.day,
                entry.timeSlot,
                entry.className,
                entry.subject,
                entry.teacher,
            ].map(v => `"${v.replace(/"/g, '""')}"`);
            csvRows.push(row.join(','));
        }
    }
    
    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", `school-routine${selectedClass === 'all' ? '' : `-${selectedClass}`}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  const handleCellClick = (day: string, timeSlot: string, entry: ScheduleEntry | null) => {
    setCurrentCell({ day, timeSlot, class: entry?.className || '' });
    if (entry) {
        setCellData({
            subject: entry.subject,
            className: entry.className,
            teacher: entry.teacher,
        });
    } else {
        setCellData({ subject: "", className: "", teacher: "" });
    }
    setIsDialogOpen(true);
  };
  
  const handleSave = () => {
    if (!currentCell) return;
  
    // Remove all existing entries for the specific day, time slot, and class
    let newSchedule = scheduleData.schedule.filter(
      (e) => !(e.day === currentCell.day && e.timeSlot === currentCell.timeSlot && e.className === currentCell.class)
    );
  
    // Add the new or updated entry if all fields are filled
    if (cellData.subject && cellData.className && cellData.teacher) {
      newSchedule.push({
        day: currentCell.day,
        timeSlot: currentCell.timeSlot,
        ...cellData,
      });
    }
  
    onScheduleChange(newSchedule);
    setIsDialogOpen(false);
    setCurrentCell(null);
  };
  
  const handleDelete = () => {
     if (!currentCell) return;
     const newSchedule = scheduleData.schedule.filter(
        (e) => !(e.day === currentCell.day && e.timeSlot === currentCell.timeSlot && e.className === currentCell.class)
      );
      onScheduleChange(newSchedule);
      setIsDialogOpen(false);
      setCurrentCell(null);
  }

  const renderCellContent = (entries: ScheduleEntry[] | null, day: string, timeSlot: string) => {
    const filteredEntries = selectedClass === 'all' 
        ? entries 
        : entries?.filter(e => e.className.includes(selectedClass));

    if (!filteredEntries || filteredEntries.length === 0) {
        return (
            <div 
                className="h-full min-h-[60px] cursor-pointer"
                onClick={() => handleCellClick(day, timeSlot, null)}
            >
                <span className="text-muted-foreground">-</span>
            </div>
        );
    }

    return (
        <div className="space-y-1">
            {filteredEntries.map((entry, index) => (
                <div 
                    key={index} 
                    className="text-xs text-center p-1 bg-muted/50 rounded cursor-pointer hover:bg-accent"
                    onClick={() => handleCellClick(day, timeSlot, entry)}
                >
                  <div className="font-semibold">{entry.subject}</div>
                  <div className="text-muted-foreground">{entry.className}</div>
                  <div className="text-muted-foreground">{entry.teacher}</div>
                </div>
            ))}
        </div>
    );
  };

  return (
    <>
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle>Generated Routine</CardTitle>
        <CardDescription>View, print, export, or edit your new routine by clicking on a cell.</CardDescription>
      </CardHeader>
      <CardContent className="flex-grow flex flex-col gap-4">
        <div className="printable-area flex-grow">
          <div className="no-print space-y-4 p-4 border rounded-lg bg-muted/30">
              <div className="grid grid-cols-2 gap-4">
                  <div>
                      <Label htmlFor="print-header">Print Header</Label>
                      <Input id="print-header" value={printHeader} onChange={(e) => setPrintHeader(e.target.value)} />
                  </div>
                  <div>
                      <Label htmlFor="print-footer">Print Footer</Label>
                      <Input id="print-footer" value={printFooter} onChange={(e) => setPrintFooter(e.target.value)} />
                  </div>
              </div>
              {classes.length > 0 && (
                <div>
                    <Label htmlFor="class-filter">Filter by Class</Label>
                    <Select value={selectedClass} onValueChange={setSelectedClass}>
                      <SelectTrigger id="class-filter" className="w-full">
                        <SelectValue placeholder="Select a class" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Classes</SelectItem>
                        {classes.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                      </SelectContent>
                    </Select>
                </div>
              )}
              <div className="flex gap-2">
                  <Button onClick={handlePrint} className="w-full">
                      <Printer className="mr-2 h-4 w-4" /> Print
                  </Button>
                  <Button onClick={handleExport} variant="secondary" className="w-full">
                      <Download className="mr-2 h-4 w-4" /> Export CSV
                  </Button>
              </div>
          </div>
          <div className="mt-4">
              <h3 className="text-center font-bold text-lg mb-2">{printHeader}{selectedClass !== 'all' && ` - ${selectedClass}`}</h3>
              <div className="overflow-x-auto">
                <Table>
                    <TableHeader>
                    <TableRow>
                        <TableHead className="min-w-[120px]">Time</TableHead>
                        {daysOfWeek.map(day => <TableHead key={day} className="text-center">{day}</TableHead>)}
                    </TableRow>
                    </TableHeader>
                    <TableBody>
                    {timeSlots.map(slot => (
                        <TableRow key={slot}>
                        <TableCell className="font-medium align-top">{slot}</TableCell>
                        {daysOfWeek.map(day => (
                            <TableCell key={`${day}-${slot}`}>
                                {renderCellContent(gridSchedule[day]?.[slot] ?? null, day, slot)}
                            </TableCell>
                        ))}
                        </TableRow>
                    ))}
                    </TableBody>
                </Table>
              </div>
              <p className="text-center text-xs text-muted-foreground mt-4">{printFooter}</p>
          </div>
        </div>
      </CardContent>
    </Card>
     <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Schedule Slot</DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="subject" className="text-right">Subject</Label>
              <Select
                value={cellData.subject}
                onValueChange={(value) => setCellData({ ...cellData, subject: value })}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select subject" />
                </SelectTrigger>
                <SelectContent>
                  {subjects.map((s) => (
                    <SelectItem key={s} value={s}>{s}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="className" className="text-right">Class</Label>
               <Select
                value={cellData.className}
                onValueChange={(value) => setCellData({ ...cellData, className: value })}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select class" />
                </SelectTrigger>
                <SelectContent>
                  {classes.map((c) => (
                    <SelectItem key={c} value={c}>{c}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="teacher" className="text-right">Teacher</Label>
              <Select
                value={cellData.teacher}
                onValueChange={(value) => setCellData({ ...cellData, teacher: value })}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select teacher" />
                </SelectTrigger>
                <SelectContent>
                   <SelectItem value="N/A">N/A</SelectItem>
                  {teachers.map((t) => (
                    <SelectItem key={t} value={t}>{t}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter className="sm:justify-between">
            <Button type="button" variant="destructive" onClick={handleDelete} className="gap-1">
              <Trash2 /> Delete
            </Button>
            <div className="flex gap-2">
                <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)}>Cancel</Button>
                <Button type="submit" onClick={handleSave}>Save changes</Button>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
