
"use client";

import { useState, useMemo } from 'react';
import type { GenerateScheduleOutput, ScheduleEntry } from "@/ai/flows/generate-schedule";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Download, Printer, Trash2 } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from '../ui/checkbox';

interface RoutineDisplayProps {
  scheduleData: GenerateScheduleOutput | null;
  timeSlots: string[];
  classes: string[];
  subjects: string[];
  teachers: string[];
  onScheduleChange: (newSchedule: ScheduleEntry[]) => void;
}

type GridSchedule = {
  [day: string]: {
    [timeSlot: string]: ScheduleEntry[]
  }
};

const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

export default function RoutineDisplay({ scheduleData, timeSlots, classes, subjects, teachers, onScheduleChange }: RoutineDisplayProps) {
  const [printHeader, setPrintHeader] = useState("Weekly Class Schedule");
  const [printFooter, setPrintFooter] = useState("Generated by BiharSchoolRoutine");
  const [selectedClass, setSelectedClass] = useState<string>('all');
  
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [currentCell, setCurrentCell] = useState<{ day: string; timeSlot: string; entry: ScheduleEntry | null } | null>(null);
  const [cellData, setCellData] = useState<{ subject: string; classNames: string[]; teacher: string }>({
    subject: "",
    classNames: [],
    teacher: "",
  });

  const { secondaryClasses, seniorSecondaryClasses } = useMemo(() => {
    const secondary: string[] = [];
    const seniorSecondary: string[] = [];
    classes.forEach(c => {
      if (/\b(9|10)\b/.test(c) || c.includes('9th') || c.includes('10th')) {
        secondary.push(c);
      } else if (/\b(11|12)\b/.test(c) || c.includes('11th') || c.includes('12th')) {
        seniorSecondary.push(c);
      }
    });
    return { secondaryClasses: secondary, seniorSecondaryClasses: seniorSecondary };
  }, [classes]);

  const gridSchedule = useMemo<GridSchedule>(() => {
    const grid: GridSchedule = {};
    
    daysOfWeek.forEach(day => {
        grid[day] = {};
        timeSlots.forEach(slot => {
            grid[day][slot] = [];
        })
    });

    if (scheduleData?.schedule) {
      scheduleData.schedule.forEach(entry => {
        if (grid[entry.day] && grid[entry.day][entry.timeSlot]) {
          grid[entry.day][entry.timeSlot].push(entry);
        }
      });
    }

    return grid;
  }, [scheduleData, timeSlots]);


  const handlePrint = () => {
    const root = document.documentElement;
    root.style.setProperty('--print-header-content', `"${printHeader}"`);
    root.style.setProperty('--print-footer-content', `"${printFooter}"`);
    window.print();
  };

  const handleExport = () => {
    const csvRows = [];
    const headers = ['Day', 'Time Slot', 'Class', 'Subject', 'Teacher'];
    csvRows.push(headers.join(','));

    if (scheduleData?.schedule) {
      for (const entry of scheduleData.schedule) {
          if(selectedClass === 'all' || entry.className.includes(selectedClass)) {
              const row = [
                  entry.day,
                  entry.timeSlot,
                  entry.className,
                  entry.subject,
                  entry.teacher,
              ].map(v => `"${v.replace(/"/g, '""')}"`);
              csvRows.push(row.join(','));
          }
      }
    }
    
    const csvString = csvRows.join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", `school-routine${selectedClass === 'all' ? '' : `-${selectedClass}`}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  const handleCellClick = (day: string, timeSlot: string, entry: ScheduleEntry | null) => {
    setCurrentCell({ day, timeSlot, entry });
    if (entry) {
        setCellData({
            subject: entry.subject,
            classNames: entry.className.split(' & '),
            teacher: entry.teacher,
        });
    } else {
        // When clicking an empty cell, we pre-fill the class if one is filtered
        setCellData({ subject: "", classNames: selectedClass !== 'all' ? [selectedClass] : [], teacher: "" });
    }
    setIsDialogOpen(true);
  };
  
  const handleSave = () => {
    if (!currentCell || cellData.classNames.length === 0) return;
  
    const currentSchedule = scheduleData?.schedule || [];
    let newSchedule: ScheduleEntry[];
  
    const newEntryData = {
        subject: cellData.subject,
        className: cellData.classNames.join(' & '),
        teacher: cellData.teacher
    };

    if (currentCell.entry) {
      // Update existing entry
      newSchedule = currentSchedule.map(e =>
        e === currentCell.entry ? { ...e, ...newEntryData } : e
      );
    } else {
      // Add new entry
      const newEntry: ScheduleEntry = {
        day: currentCell.day,
        timeSlot: currentCell.timeSlot,
        ...newEntryData,
      };
      newSchedule = [...currentSchedule, newEntry];
    }
    
    onScheduleChange(newSchedule);
    setIsDialogOpen(false);
    setCurrentCell(null);
  };
  
  const handleDelete = () => {
     if (!currentCell || !currentCell.entry) return;
     const newSchedule = (scheduleData?.schedule || []).filter(
        (e) => e !== currentCell.entry
      );
      onScheduleChange(newSchedule);
      setIsDialogOpen(false);
      setCurrentCell(null);
  }

  const renderCellContent = (entries: ScheduleEntry[] | null, day: string, timeSlot: string, displayClasses: string[]) => {
    const filteredEntries = entries?.filter(e => {
        const entryClasses = e.className.split(' & ');
        const isInDisplayClasses = entryClasses.some(ec => displayClasses.some(dc => ec.trim() === dc.trim()));
        
        if (!isInDisplayClasses) return false;

        if (selectedClass === 'all') return true;
        
        return entryClasses.includes(selectedClass);
    });

    if (!filteredEntries || filteredEntries.length === 0) {
        return (
            <div 
                className="h-full min-h-[60px] cursor-pointer hover:bg-muted/50 rounded-md"
                onClick={() => handleCellClick(day, timeSlot, null)}
            >
                <span className="text-muted-foreground p-2 text-xs">+ Add</span>
            </div>
        );
    }

    return (
        <div className="space-y-1">
            {filteredEntries.map((entry, index) => (
                <div 
                    key={index} 
                    className="text-xs text-center p-1 bg-muted/50 rounded cursor-pointer hover:bg-accent hover:shadow-md"
                    onClick={() => handleCellClick(day, timeSlot, entry)}
                >
                  <div className="font-semibold">{entry.subject}</div>
                  <div className="text-muted-foreground">{entry.className}</div>
                  <div className="text-muted-foreground text-xs">{entry.teacher}</div>
                </div>
            ))}
             <div 
                className="text-center cursor-pointer pt-1"
                onClick={() => handleCellClick(day, timeSlot, null)}
            >
                <span className="text-muted-foreground text-xs hover:text-primary">+</span>
            </div>
        </div>
    );
  };

  const renderEmptyState = () => (
     <Card className="h-full">
        <CardContent className="h-full flex flex-col items-center justify-center text-center p-6">
            <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-muted-foreground"><path d="M8 2v4"/><path d="M16 2v4"/><rect width="18" height="18" x="3" y="4" rx="2"/><path d="M3 10h18"/></svg>
            </div>
            <h3 className="font-semibold text-lg text-foreground">Your routine will appear here</h3>
            <p className="text-sm text-muted-foreground mt-1">
              Generate a routine with AI or build one by clicking the cells in the grid.
            </p>
        </CardContent>
      </Card>
  )

  const renderScheduleTable = (title: string, displayClasses: string[]) => {
    if (displayClasses.length === 0) return null;

    return (
    <div>
      <h3 className="text-lg font-semibold mb-2">{title}</h3>
      <div className="overflow-x-auto border rounded-lg">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="min-w-[120px] font-bold">Time</TableHead>
              {daysOfWeek.map(day => <TableHead key={day} className="text-center font-bold">{day}</TableHead>)}
            </TableRow>
          </TableHeader>
          <TableBody>
            {timeSlots.map(slot => (
              <TableRow key={slot}>
                <TableCell className="font-medium align-top text-xs">{slot}</TableCell>
                {daysOfWeek.map(day => (
                  <TableCell key={`${day}-${slot}`} className="p-1 align-top">
                    {renderCellContent(gridSchedule[day]?.[slot] ?? null, day, slot, displayClasses)}
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
    )
  };

  return (
    <>
    <Card className="h-full flex flex-col">
      <CardHeader>
        <div className="flex justify-between items-start">
            <div>
                <CardTitle>School Routine</CardTitle>
                <CardDescription>View, print, export, or edit your routine by clicking on a cell.</CardDescription>
            </div>
             <div className="flex gap-2 no-print">
                  <Button onClick={handlePrint} size="sm" variant="outline">
                      <Printer className="mr-2 h-4 w-4" /> Print
                  </Button>
                  <Button onClick={handleExport} size="sm" variant="outline">
                      <Download className="mr-2 h-4 w-4" /> Export CSV
                  </Button>
              </div>
        </div>
        <div className="no-print space-y-4 pt-4">
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  <div className="sm:col-span-1">
                      <Label htmlFor="class-filter">Filter by Class</Label>
                       <Select value={selectedClass} onValueChange={setSelectedClass}>
                        <SelectTrigger id="class-filter" className="w-full">
                          <SelectValue placeholder="Select a class" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">All Classes</SelectItem>
                          {classes.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                        </SelectContent>
                      </Select>
                  </div>
                   <div>
                      <Label htmlFor="print-header">Print Header</Label>
                      <Input id="print-header" value={printHeader} onChange={(e) => setPrintHeader(e.target.value)} />
                  </div>
                  <div>
                      <Label htmlFor="print-footer">Print Footer</Label>
                      <Input id="print-footer" value={printFooter} onChange={(e) => setPrintFooter(e.target.value)} />
                  </div>
              </div>
          </div>
      </CardHeader>
      <CardContent className="flex-grow flex flex-col gap-4">
        <div className="printable-area flex-grow">
          {!scheduleData || scheduleData.schedule.length === 0 ? renderEmptyState() : (
            <>
                <h3 className="text-center font-bold text-lg mb-2 print-only">{printHeader}{selectedClass !== 'all' && ` - ${selectedClass}`}</h3>
                <div className="space-y-6">
                    {renderScheduleTable("Secondary", secondaryClasses)}
                    {renderScheduleTable("Senior Secondary", seniorSecondaryClasses)}
                </div>
                <p className="text-center text-xs text-muted-foreground mt-4 print-only">{printFooter}</p>
            </>
          )}
        </div>
      </CardContent>
    </Card>
     <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Schedule Slot</DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="subject" className="text-right">Subject</Label>
              <Select
                value={cellData.subject}
                onValueChange={(value) => setCellData({ ...cellData, subject: value })}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select subject" />
                </SelectTrigger>
                <SelectContent>
                  {subjects.map((s) => (
                    <SelectItem key={s} value={s}>{s}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-start gap-4">
              <Label className="text-right pt-2">Class</Label>
               <div className="col-span-3 grid grid-cols-2 gap-2">
                  {classes.map((c) => (
                    <div key={c} className="flex items-center space-x-2">
                        <Checkbox
                            id={`class-${c}`}
                            checked={cellData.classNames.includes(c)}
                            onCheckedChange={(checked) => {
                                const newClassNames = checked
                                    ? [...cellData.classNames, c]
                                    : cellData.classNames.filter(name => name !== c);
                                setCellData({...cellData, classNames: newClassNames});
                            }}
                        />
                        <Label htmlFor={`class-${c}`}>{c}</Label>
                    </div>
                  ))}
                </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="teacher" className="text-right">Teacher</Label>
              <Select
                value={cellData.teacher}
                onValueChange={(value) => setCellData({ ...cellData, teacher: value })}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select teacher" />
                </SelectTrigger>
                <SelectContent>
                   <SelectItem value="N/A">N/A</SelectItem>
                  {teachers.map((t) => (
                    <SelectItem key={t} value={t}>{t}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter className="sm:justify-between">
             {currentCell?.entry ? (
                <Button type="button" variant="destructive" onClick={handleDelete} className="gap-1">
                  <Trash2 /> Delete
                </Button>
             ) : <div></div>}
            <div className="flex gap-2">
                <Button type="button" variant="outline" onClick={() => setIsDialogOpen(false)}>Cancel</Button>
                <Button type="submit" onClick={handleSave}>Save changes</Button>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
